import "./Lesson.scss";
import first from "./Lesson11_img/first.png"

export const Lesson11= () => {

    return(
        <div className="lesson-block">
            <h1 className="title-h1">Введення у WPF</h1>
            <div className="main-block">
                <div className="content">
                    <h3 className="content__title-h3">Особливості платформи WPF</h3>
                    <div className="content__block">
                        <p className="content__paragraph">Технологія WPF (Windows Presentation Foundation) є частиною екосистеми платформи .NET і є підсистемою для побудови графічних інтерфейсів.</p>
                        <p className="content__paragraph">Якщо при створенні традиційних програм на основі WinForms за малювання елементів керування та графіки відповідали такі частини ОС Windows, як User32 та GDI+, то програми WPF засновані на DirectX . У цьому полягає ключова особливість рендерингу графіки у WPF: використовуючи WPF, значна частина роботи з відтворення графіки, як найпростіших кнопочок, так і складних 3D-моделей, лягатиме на графічний процесор на відеокарті, що також дозволяє скористатися апаратним прискоренням графіки.</p>
                        <p className="content__paragraph">Однією з важливих особливостей є використання мови декларативної розмітки інтерфейсу XAML, заснованого на XML: ви можете створювати насичений графічний інтерфейс, використовуючи або декларативне оголошення інтерфейсу, або код керованих мов C#, VB.NET і F#, або поєднувати і те, і інше.</p>
                        <p className="content__paragraph">Перша версія - WPF 3.0 вийшла разом із .NET Framework 3.0 та операційною системою Windows Vista у 2006 році. І з того часу платформа WPF є частиною екосистеми .NET і розвивається разом із фреймворком .NET. Наприклад, на сьогоднішній день останньою версією фреймворку .NET є .NET 8 і WPF повністю підтримується цією версією фреймворку.</p>
                    </div>
                </div>
                <div className="content">
                    <h3 className="content__title-h3">Переваги WPF</h3>
                    <div className="content__block">
                        <p className="content__paragraph">Що вам, як розробнику, пропонує WPF?</p>  
                        <p className="content__paragraph">- Використання традиційних мов .NET-платформи - C#, F# та VB.NET для створення логіки програми</p>  
                        <p className="content__paragraph">- Можливість декларативного визначення графічного інтерфейсу за допомогою спеціальної мови розмітки XAML, що базується на xml і представляє альтернативу програмному створенню графіки та елементів керування, а також можливість комбінувати XAML та C#/VB.NET</p>  
                        <p className="content__paragraph">- Незалежність від роздільної здатності екрана : оскільки у WPF всі елементи вимірюються в незалежних від пристрою одиницях, програми на WPF легко масштабуються під різні екрани з різною роздільною здатністю.</p>  
                        <p className="content__paragraph">- Нові можливості, яких складно було досягти WinForms, наприклад, створення тривимірних моделей, прив'язка даних, використання таких елементів, як стилі, шаблони, теми та ін.</p>  
                        <p className="content__paragraph">- Хороша взаємодія з WinForms , завдяки чому, наприклад, у додатках WPF можна використовувати традиційні елементи керування WinForms.</p>  
                        <p className="content__paragraph">- Багаті можливості створення різних додатків: це і мультимедіа, і двомірна і тривимірна графіка, і багатий набір вбудованих елементів управління, а також можливість самим створювати нові елементи, створення анімацій, прив'язка даних, стилі, шаблони, теми та багато іншого</p>  
                        <p className="content__paragraph">- Апаратне прискорення графіки - незалежно від того, чи працюєте ви з 2D або 3D, графікою або текстом, всі компоненти програми транслюються в об'єкти, зрозумілі Direct3D, а потім візуалізуються за допомогою процесора на відеокарті, що підвищує продуктивність, робить графіку більш плавною.</p>  
                        <p className="content__paragraph">- Створення програм під безліч ОС сімейства Windows</p>           
                    </div>
                    <div className="content__block">
                        <p className="content__paragraph">У той же час WPF має певні обмеження. Незважаючи на підтримку тривимірної візуалізації, для створення програм з великою кількістю тривимірних зображень, перш за все ігор, краще використовувати інші засоби - DirectX або спеціальні фреймворки, такі як Monogame або Unity.</p>
                        <p className="content__paragraph">Також варто враховувати, що в порівнянні з додатками на Windows Forms обсяг програм на WPF та споживання ними пам'яті в процесі роботи в середньому дещо вищий. Але це з лишком компенсується ширшими графічними можливостями та підвищеною продуктивністю при малюванні графіки.</p>
                        <p className="content__paragraph">Крім того, незважаючи на те, що WPF працює поверх платформи .NET, але в силу природи WPF і залежності від компонентів Windows, на даний момент створювати програми на WPF можна тільки під ОС Windows.</p>           
                    </div>
                </div>
                <div className="content">
                    <h3 className="content__title-h3">Архітектура WPF</h3>
                    <div className="content__block">
                        <p className="content__paragraph">Схематично архітектуру WPF можна представити так:</p>    
                        <img src={first} alt="#" className="img"/>      
                    </div>
                    <div className="content__block">
                        <p className="content__paragraph">Як видно на схемі, WPF розбивається на два рівні: managed API та unmanaged API (рівень інтеграції з DirectX). Managed API (керований API-інтерфейс) містить код, який виконується під управлінням загальномовного середовища виконання .NET - Common Language Runtime. Цей API описує основний функціонал платформи WPF і складається з наступних компонентів:</p>
                        <p className="content__paragraph">- PresentationFramework.dll : містить усі основні реалізації компонентів та елементів управління, які можна використовувати при побудові графічного інтерфейсу</p>   
                        <p className="content__paragraph">- PresentationCore.dll : містить усі базові типи для більшості класів з PresentationFramework.dll</p>   
                        <p className="content__paragraph">- WindowsBase.dll : містить ряд допоміжних класів, які застосовуються в WPF, але можуть також використовуватися і поза цією платформою</p>              
                    </div>
                    <div className="content__block">
                        <p className="content__paragraph">Unmanaged API використовується для інтеграції вищого рівня з DirectX:</p>  
                        <p className="content__paragraph">- milcore.dll : власне забезпечує інтеграцію компонентів WPF з DirectX. Цей компонент написаний на некерованому коді (С/С++) взаємодії з DirectX.</p>
                        <p className="content__paragraph">- WindowsCodecs.dll : бібліотека, яка надає низькорівневу підтримку для зображень у WPF</p>         
                    </div>
                    <div className="content__block">
                        <p className="content__paragraph">Ще нижче власне знаходяться компоненти операційної системи та DirectX, які роблять візуалізацію компонентів програми, або виконують іншу низькорівневу обробку. Зокрема, за допомогою низькорівневого інтерфейсу Direct3D, що входить до складу DirectX, відбувається трансляція</p>
                        <p className="content__paragraph">Тут також на одному рівні знаходиться бібліотека user32.dll . І хоча вище говорилося, що WPF не використовує цю бібліотеку для рендерингу та візуалізації, проте для низки обчислювальних завдань (що не включають візуалізацію) ця бібліотека продовжує використовуватись.</p>            
                    </div>
                </div>
            </div>
        </div>    
    )
}

export default Lesson11